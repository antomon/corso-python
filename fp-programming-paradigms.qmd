---
reference-location: margin
citation-location: margin
---

# Paradigmi di programmazione

I linguaggi di programmazione possono essere classificati in diversi tipi in base al loro scopo e alla loro struttura. Tuttavia, è importante notare che molti linguaggi moderni supportano più di un paradigma di programmazione, rendendo difficile assegnare un linguaggio a una sola categoria. Come ha affermato Bjarne Stroustrup, il creatore di C++, un linguaggio di programmazione "non è semplicemente supportare un certo paradigma, ma abilitare un certo stile di programmazione" [@stroustrup1997].

### Linguaggi di programmazione imperativa

La programmazione imperativa si concentra sull'esecuzione di istruzioni sequenziali che modificano lo stato del programma. Le istruzioni indicano al computer cosa fare passo dopo passo. Esempi di linguaggi che permettono il paradigma imperativo sono Assembly, C, Go, Python, per diversi casi d'uso:

  - Assembly: Utilizzato nella programmazione a basso livello, come nello sviluppo di firmware e driver di dispositivi.
  - C: Utilizzato per lo sviluppo di sistemi operativi e software di sistema, dove il controllo dettagliato delle operazioni è cruciale.
  - Go: Utilizzato per costruire applicazioni di rete e sistemi scalabili, noto per la sua efficienza e facilità di utilizzo nelle applicazioni concorrenti.
  - Python: Utilizzato in vari campi e noto per la sua semplicità e leggibilità, supporta la programmazione imperativa con l'uso di dichiarazioni di controllo e assegnazioni di variabili.

### Linguaggi procedurali

La programmazione procedurale è un sottotipo di programmazione imperativa che organizza il codice in blocchi chiamati procedure o funzioni. Questi blocchi possono essere riutilizzati in diverse parti del programma per evitare ripetizioni e migliorare l'organizzazione del codice.

- Esempi: Fortran, Pascal, C, Go.
- Casi d'uso:
  - Fortran: Molto utilizzato in applicazioni scientifiche e di ingegneria per calcoli numerici ad alta precisione.
  - Pascal: Storicamente utilizzato nell'educazione per insegnare i fondamenti della programmazione.
  - C: Utilizzato per la programmazione di sistemi operativi, software di sistema e applicazioni a basso livello.
  - Go: Sviluppato da Google, utilizzato per costruire applicazioni di rete e sistemi scalabili, noto per la sua efficienza e facilità di utilizzo nelle applicazioni concorrenti. Supporta la programmazione procedurale grazie alla possibilità di definire funzioni e organizzare il codice in moduli.

### Linguaggi Orientati agli Oggetti

Questi linguaggi modellano il problema come un insieme di oggetti che interagiscono tra loro per svolgere un compito. Gli oggetti sono istanze di classi, che possono contenere dati e metodi per manipolare quei dati.

- Esempi: Java, Python, C++, Rust, Scala.
- Casi d'uso:
  - Java: Ampiamente utilizzato per lo sviluppo di applicazioni aziendali, applicazioni Android e sistemi di backend.
  - Python: Utilizzato in vari campi, dalla scienza dei dati all'intelligenza artificiale, fino allo sviluppo web con framework come Django e Flask.
  - C++: Utilizzato in applicazioni ad alte prestazioni come videogiochi, motori grafici e software di simulazione.
  - Rust: Concepito per garantire la sicurezza della memoria e la concorrenza, offre anche supporto per la programmazione orientata agli oggetti.
  - Scala: Utilizzato per sviluppare applicazioni scalabili e sistemi distribuiti, spesso usato insieme alla piattaforma Apache Spark per l'elaborazione di grandi dati.

### Linguaggi Funzionali

Questi linguaggi si concentrano sulla valutazione di espressioni e funzioni, trattandole come equazioni matematiche. La programmazione funzionale enfatizza l'uso di funzioni pure e l'immutabilità dei dati.

- Esempi: Haskell, Lisp, ML, Scala.
- Casi d'uso:
  - Haskell: Utilizzato nella ricerca accademica, nello sviluppo di software finanziario e nei sistemi di calcolo parallelo.
  - Lisp: Storicamente utilizzato nell'intelligenza artificiale e nello sviluppo di software di simulazione.
  - ML: Utilizzato nello sviluppo di compilatori, nell'analisi formale di programmi e in applicazioni finanziarie.
  - Scala: Supporta sia la programmazione orientata agli oggetti che la programmazione funzionale, rendendolo un linguaggio versatile per vari tipi di applicazioni.

### Altri Paradigmi di Programmazione

Oltre ai paradigmi principali sopra menzionati, esistono altri paradigmi di programmazione meno comuni ma altrettanto importanti in certi contesti.

- Logico: Linguaggi come Prolog, utilizzati principalmente nell'intelligenza artificiale e nel trattamento del linguaggio naturale.
- Concorrente: Linguaggi come Erlang, utilizzati nello sviluppo di sistemi distribuiti e applicazioni che richiedono alta disponibilità.
- Dichiarativo: Linguaggi come SQL, utilizzati per interrogare e manipolare database.

---

Questa versione aggiornata dispone i paradigmi di programmazione in ordine di complessità crescente, iniziando con la programmazione imperativa. Inoltre, include esempi di linguaggi come Rust, Go e Scala e chiarisce la natura multi-paradigma di molti linguaggi di programmazione.