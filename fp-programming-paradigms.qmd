---
reference-location: margin
citation-location: margin
---

# Paradigmi di programmazione

I linguaggi di programmazione possono essere classificati in diversi tipi in base al loro scopo e alla loro struttura. Tuttavia, è importante notare che molti linguaggi moderni supportano più di un paradigma di programmazione, rendendo difficile assegnare un linguaggio a una sola categoria. Come ha affermato Bjarne Stroustrup, il creatore di C++, un linguaggio di programmazione "non è semplicemente supportare un certo paradigma, ma abilitare un certo stile di programmazione" [@stroustrup1997].

## Linguaggi di programmazione imperativa

La programmazione imperativa si concentra sull'esecuzione di istruzioni sequenziali che modificano lo stato del programma. Le istruzioni indicano al computer cosa fare passo dopo passo. Esempi di linguaggi che permettono il paradigma imperativo sono Assembly, C, Go, Python, per diversi casi d'uso:

- Assembly: Utilizzato nella programmazione a basso livello, come nello sviluppo di firmware e driver di dispositivi.
- C: Utilizzato per lo sviluppo di sistemi operativi e software di sistema, dove il controllo dettagliato delle operazioni è cruciale.
- Go: Sviluppato da Google, è utilizzato per costruire applicazioni di rete e sistemi scalabili, noto per la sua efficienza e facilità di utilizzo nelle applicazioni concorrenti.
- Python: Utilizzato in vari campi e noto per la sua semplicità e leggibilità, supporta la programmazione imperativa con l'uso di dichiarazioni di controllo e assegnazioni di variabili.

## Linguaggi procedurali

La programmazione procedurale è un sottotipo di programmazione imperativa che organizza il codice in blocchi chiamati procedure o funzioni. Questi blocchi possono essere riutilizzati in diverse parti del programma per evitare ripetizioni e migliorare l'organizzazione del codice. Esempi sono Fortran, Pascal, C, Go, Python e i relativi casi d'uso:

- Fortran: Molto utilizzato in applicazioni scientifiche e di ingegneria per calcoli numerici ad alta precisione.
- Pascal: Storicamente utilizzato nei corsi di informativa per insegnare i fondamenti della programmazione.
- Go, Python: Supportano la programmazione procedurale grazie alla possibilità di definire funzioni e organizzare il codice in moduli.
- C: Anche se C non supporta i moduli nel senso moderno, utilizza file header (.h) e file sorgente (.c) per separare e organizzare il codice.

## Linguaggi orientati agli oggetti

Questi linguaggi modellano il problema come un insieme di oggetti che interagiscono tra loro per svolgere un compito. Gli oggetti sono istanze di classi, che possono contenere dati e metodi per manipolare quei dati. La programmazione orientata agli oggetti è estremamente utile per progettare architetture software complesse grazie ai suoi concetti di modularità, riutilizzabilità, astrazione, ereditarietà e polimorfismo. Alcuni linguaggi ad oggetti sono Java, Python, C++, Rust, Scala e i casi d'uso:

- Java: Ampiamente utilizzato per lo sviluppo di applicazioni aziendali, applicazioni Android e sistemi di backend.
- C++: Utilizzato in applicazioni ad alte prestazioni come videogiochi, motori grafici e software di simulazione. Il C++ supporta i template, che permettono la scrittura di codice generico e la metaprogrammazione, consentendo al codice di essere più flessibile e riutilizzabile.
- Rust: Concepito per garantire la sicurezza della memoria e la concorrenza, offre anche supporto per la programmazione orientata agli oggetti.
- Scala: Utilizzato per sviluppare applicazioni scalabili e sistemi distribuiti, spesso usato per l'elaborazione di grandi moli di dati. Scala supporta i generics, che sono simili ai template in C++, permettendo di scrivere codice generico e riutilizzabile.

## Linguaggi funzionali

Questi linguaggi si concentrano sulla valutazione di espressioni e funzioni, trattandole alla stregua di equazioni matematiche. La programmazione funzionale enfatizza l'uso di funzioni pure (cioè hanno come unico effetto quello di produrre un output) e l'immutabilità dei dati. Alcuni esempi: Haskell, Lisp, ML, Scala e i casi d'uso:

- Haskell: Utilizzato nella ricerca accademica, nello sviluppo di software finanziario e nei sistemi di calcolo parallelo.
- Lisp: Storicamente utilizzato nell'intelligenza artificiale e nello sviluppo di software di simulazione. ELIZA, uno dei primi chatbot che potevano simulare una conversazione umana, era scritto in Lisp.
- Meta language (ML): Utilizzato nello sviluppo di compilatori, nell'analisi formale di programmi e in applicazioni finanziarie. ML ha diversi dialetti importanti, ognuno dei quali ha influenzato significativamente la programmazione funzionale e lo sviluppo di linguaggi di programmazione, come F# e OCaml.
- Scala: Abilita sia la programmazione orientata agli oggetti che la programmazione funzionale, rendendolo un linguaggio versatile per vari tipi di applicazioni.
- Python: Sebbene Python non sia un linguaggio di programmazione funzionale puro come l'Haskell, offre comunque molte funzionalità che facilitano lo stile di programmazione funzionale, ad esempio la funzioni di prima classe, quelle anonime dette lambda e le funzioni di ordine superiore (map, filter, reduce).

## Altri paradigmi di programmazione

Oltre ai paradigmi principali sopra menzionati, esistono altri paradigmi di programmazione meno comuni ma altrettanto importanti in certi contesti.

- Logico: Prolog, che sta per programming in logic, è stato sviluppato nei primi anni '70 da Alain Colmerauer e Robert Kowalski. È uno dei linguaggi più noti per la programmazione logica e ha giocato un ruolo significativo nello sviluppo dell'intelligenza artificiale.
- Concorrente: Uno dei più diffusi linguaggi abilitanti la programmazione concirrente è l'Erlang, utilizzato nello sviluppo di sistemi distribuiti e applicazioni che richiedono alta disponibilità.
- Dichiarativo: La programmazione dichiarativa si concentra sul "cosa" deve essere fatto piuttosto che sul "come" farlo. In altre parole, in un linguaggio dichiarativo, il programmatore specifica il risultato desiderato, lasciando al sistema il compito di determinare come ottenerlo. Questo approccio contrasta con la programmazione imperativa, dove il programmatore deve fornire una sequenza dettagliata di passi per raggiungere il risultato. Un esempio è lo structured query language (SQL), standard de facto per interrogare e manipolare database relazionali. Altri ben noti linguaggi dichiarativi sono: CSS, XQuery, VHDL, RegEx, Makefile.

## In sintesi

I paradigmi di programmazione offrono diversi approcci per risolvere problemi e progettare sistemi software. Ogni paradigma ha i suoi punti di forza e indirizza specifiche esigenze nel processo di sviluppo del software. La comprensione e l'utilizzo dei vari paradigmi permette ai programmatori di scegliere l'approccio più appropriato per il problema in questione e di scrivere codice più efficace, mantenibile e riutilizzabile:

- Programmazione imperativa: Ottimale per problemi che richiedono una sequenza di istruzioni dettagliate e un controllo preciso sullo stato del programma.
- Programmazione procedurale: Favorisce la modularità e la riusabilità del codice tramite la suddivisione in procedure o funzioni.
- Programmazione orientata agli oggetti: Eccelle nella gestione di sistemi complessi grazie alla modularità, riusabilità, astrazione, ereditarietà e polimorfismo.
- Programmazione funzionale: Promuove funzioni pure, immutabilità e composizionalità, facilitando il ragionamento e la verifica del comportamento del sistema.
- Programmazione logica: Ideale per problemi che possono essere espressi in termini di relazioni logiche, come l'intelligenza artificiale e la risoluzione di vincoli.
- Programmazione dichiarativa: Si concentra sul "cosa" piuttosto che sul "come", rendendo il codice più leggibile e permettendo l'ottimizzazione automatica.

Alcuni linguaggi di programmazione, come Python e C++, sono noti per il loro supporto a molteplici paradigmi, rendendoli strumenti versatili e potenti nel repertorio di un programmatore.