---
reference-location: margin
citation-location: margin

format:
  html:
    code-link: true
---

# Esercizi

Legenda livelli: 

➀ Neofita: Adatto a chi è alle prime armi con la programmazione. Gli esercizi di questo livello richiedono una conoscenza basilare della sintassi di Python e dei concetti fondamentali come variabili, semplici espressioni, dimistichezza coll'esecuzione dell'interprete.
   
➁ Principiante: Gli esercizi a questo livello sono pensati per chi ha familiarità con i costrutti di base di Python e vuole iniziare a esplorare le strutture dati come liste, tuple e dizionari. 

➂ Principiante evoluto: Questi esercizi richiedono una comprensione più approfondita dei costrutti disponibili e delle operazioni sulle strutture dati fornite dal linguaggio. Gli studenti dovrebbero essere in grado di scrivere funzioni e manipolare collezioni di dati, usando la documentazione del linguaggio.

➃ Autonomo: A questo livello, gli studenti devono saper gestire concetti come la gestione delle eccezioni, l'uso di moduli e pacchetti standard, e la scrittura di codice più organizzato e modulare. Gli stuedenti devono saper effettuare un debugging e fornire codice documentato.

➄ Intermedio: Gli esercizi richiedono la capacità di lavorare con librerie esterne, creare e gestire oggetti complessi, e utilizzare tecniche di programmazione più avanzate come le comprensioni di lista e le espressioni lambda. Gli studenti devono produrre codice robuto per mezzo di tecniche come i test di unità.

➅ Esperto: A questo livello, gli esercizi implicano la conoscenza di concetti avanzati come il decoratori, i generatori, e la manipolazione avanzata dei dati. Gli studenti dovrebbero essere in grado di risolvere problemi complessi con soluzioni eleganti.

➆ Esperto evoluto: Gli studenti devono avere competenze solide nella programmazione orientata agli oggetti, nella gestione delle eccezioni avanzate e nell'ottimizzazione del codice per la performance.

➇ Maestro: Gli esercizi a questo livello richiedono la conoscenza approfondita di Python, comprese le tecniche di programmazione asincrona, il threading, e la gestione di progetti di grandi dimensioni.

➈ Maestro evoluto: A questo livello, gli studenti devono padroneggiare l'uso avanzato delle librerie standard, la creazione di librerie proprie, e l'implementazione di algoritmi complessi e strutture dati personalizzate.

➉ Guru: Questo è il livello più alto di difficoltà, dove gli esercizi richiedono una comprensione approfondita e una padronanza assoluta di Python. Gli studenti devono essere in grado di risolvere problemi estremamente complessi, ottimizzare il codice a livello di prestazioni e memoria, e applicare concetti avanzati di ingegneria del software.

## Fondamenti

### ➀ Python come calcolatrice

Primi esperimenti con Python.

#### Numeri interi e in virgola mobile

::: {.panel-tabset}

Provare le operazioni su booleani, numeri interi, in virgola mobile e stringhe, nel REPL.

## Problema

Usare gli operatori matematici su costanti numeriche e osservare i risultati e gli errori nel REPL, perché è più immediato rispetto all'esecuzione completa del programma e permette di prendere dimistichezza velocemente con dei costrutti di base del linguaggio.

## Soluzione

Il codice seguente può essere eseguito sia nel REPL, riga per riga, sia come programma. 

::: {.callout-tip}
## Suggerimento

Usando il REPL, basterà digitare l'espressione senza assegnamento per ottenere il risultato.
::: 

```python
# Moltiplicazione
x = 5 * 2
print(x)

x = 5 * 2.
print(x) # Cosa notiamo?

# Divisione in virgola mobile
x = 5 / 2
print(x)

x = 4 / 2
print(x) # Cosa notiamo?

x = 4 / 2.
print(x)

# Confronto
x = 5 > 2
print(x)

x = 5 > 2.
print(x) # Cosa notiamo?

# Diversità
x = 4 != 4.
print(x) # Cosa notiamo?

x = 0 != (1 - 1)
print(x) # Cosa notiamo?
```
:::

#### Stringhe

::: {.panel-tabset}

## Problema

Usare gli operatori su stringhe, sempre nel REPL.

## Soluzione

```python
s = "Hello" + ' ' + 'World!'
print(s)

ss = s

ss *= 2
print(ss)
print(s) # Cosa notiamo per s e ss?

# Appartenenza
b = 'el' in s
print(b) 

b = 'oo' not in s
print(b)

# Confronto
b = "Ciao Mondo!" < s 
print(b) # È rispettato l'ordine lessicografico?

l_s= len(s)
print(l_s)

# Slicing della stringa come contenitore di caratteri
s_ = ss[:l_s] 
print(s_) 

l_ss = len(ss) 
print(l_ss)

# Modo alternativo di ottenere la stringa originale solo usando ss
s_ = ss[:int(l_ss / 2)] 
print(s_) 

# Metodo per rendere la stringa in maiuscolo
su = s.upper()
print(su)

# Uguaglianza
b = s == su
print(b) # Cosa notiamo?
```

:::

#### Espressioni

::: {.panel-tabset}

## Problema

Costruire delle espressioni per comprendere come mischiare numeri e stringhe, la precedenza degli operatori e le conversioni di tipo, sempre nel REPL.

## Soluzione

```python
n = 42
s = "42"

# Congiunzione
b = n and s
print(b) # Cosa notiamo?

# Disgiunzione
b = n or s
print(b) 

# Negazione e congiunzione
b = n and not s
print(b) # Cosa notiamo?

# Conversione di tipo in stringa e appartenenza
b = str(2) in s
print(b)

# Conversione di tipo in intero e divisione
b = int(s) / 2
print(b)

# Espressione con precedenza data dall'ordine degli operatori 
e = 2 + n * 3
print(e)

# Espressione con precedenza modificata colle parentesi 
e = (2 + n) * 3
print(e) # Cosa notiamo?
```

:::

## Funzioni e istruzioni composte

### ➁ Numeri pari o dispari 

Definire una funzione che prende in input un numero intero e restituisce una stringa di `Pari` o `Dispari`.

#### Riscaldamento

::: {.panel-tabset}

## Problema

Sperimentiamo l'operatore modulo `%`, che restituisce il resto della divisione di due interi, con diversi input sia pari che dispari usando un test condizionale.

## Soluzione

```python
n = 42

if n % 2 == 0:
  print("Pari")

else:
  print("Dispari")
```

:::

#### Svolgimento

::: {.panel-tabset}

## Problema 

Inserire le istruzioni in una funzione che prende in input un parametro, il numero intero, e restituisce una stringa, `Pari` o `Dispari`. Sperimentare soluzioni diverse.

## Soluzione 1

Usiamo l'operatore modulo `%` che restituisce il resto della divisione di due interi all'interno di una funzione. Questa prende in input un numero intero e restituisce la stringa richiesta.

```python
def pari_o_dispari(n):
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```

## Soluzione 2

Usiamo l'operatore modulo `%` per il test di parità sul numero intero e la funzione `isinstance` per verificare il tipo in input.

```python
def pari_o_dispari(n):
  if not isinstance(n, int):
    return "Errore: l'input deve essere un numero intero!"
    
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```

## Soluzione 3

Usiamo l'operatore modulo `%`, la funzione `isinstance` per verificare il tipo in input e `assert` in caso di input non corretto.

```python
def pari_o_dispari(n):
  assert isinstance(n, int), \
    "Errore: l'input deve essere un numero intero!"
    
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)

'''
risultato = pari_o_dispari("42")

print(risultato)

risultato = pari_o_dispari(73.)

print(risultato)
'''
```

## Soluzione 4

Usiamo la funzione `divmod` che restituisce il quoziente e il resto della divisione di due interi. Per ottenere documentazione su essa basterà digitare `help(divmod)` nel REPL.

```python
def pari_o_dispari(n):
  _, remainder = divmod(n, 2)

  return "Pari" if remainder == 0 else "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```
:::

## Sequenze

### ➁ Rimozione di duplicati da una lista preservando l'ordinamento

::: {.panel-tabset}

## Problema

Scrivere una funzione che prende in input una lista e ne rimuove i duplicati, preservando l'ordinamento.

## Soluzione 1

Usiamo un ciclo `for` per iterare attraverso la lista originale e una lista di appoggio per memorizzare gli elementi unici. Gli elementi vengono aggiunti alla lista di appoggio solo se non sono già presenti in essa, preservando così l'ordine originale.

```python
def rimuovi_duplicati(lista):
  lista_senza_duplicati = []

  for elemento in lista:
    if elemento not in lista_senza_duplicati:
      lista_senza_duplicati.append(elemento)

  return lista_senza_duplicati

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## Soluzione 2

Usiamo un ciclo while per iterare attraverso la lista originale. Un `set` viene utilizzato per memorizzare gli elementi già visti e una lista di appoggio per memorizzare gli elementi unici. Gli elementi vengono aggiunti alla lista di appoggio solo se non sono già presenti nel `set`.

```python
def rimuovi_duplicati(lista):
  lista_senza_duplicati = []

  visti = set()

  i = 0
  while i < len(lista):
    if lista[i] not in visti:
      lista_senza_duplicati.append(lista[i])

      visti.add(lista[i])

    i += 1

  return lista_senza_duplicati

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## Soluzione 3

Usiamo un dizionario per memorizzare gli elementi unici, sfruttando il fatto che i dizionari preservano l'ordine di inserimento a partire da Python 3.7. Gli elementi vengono aggiunti al dizionario come chiavi, e infine si restituisce la lista delle chiavi del dizionario.

```python
def rimuovi_duplicati(lista):
  return list(dict.fromkeys(lista))

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## ➂ Soluzione 4

Utilizziamo una list comprehension per creare una nuova lista. Un `set` viene usato per tenere traccia degli elementi già visti, e gli elementi vengono aggiunti alla lista finale solo se non sono già presenti nel `set`.

```python
def rimuovi_duplicati(lista):
  return list(dict.fromkeys(lista))

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

:::

### ➁ Rimozione di duplicati da una lista e ordinamento

::: {.panel-tabset}

## Problema

Scrivere una funzione che prende in input una lista e ne rimuove i duplicati, ordinando il risultato.

## Soluzione 1

Usiamo un ciclo `for` per iterare attraverso la lista originale e una lista di appoggio per memorizzare gli elementi unici. Gli elementi vengono aggiunti alla lista di appoggio solo se non sono già presenti in essa. Dopo aver rimosso i duplicati, ordiniamo la lista risultante.

```python
def rimuovi_duplicati(lista):
  lista_senza_duplicati = []

  for elemento in lista:
    if elemento not in lista_senza_duplicati:
      lista_senza_duplicati.append(elemento)

  return sorted(lista_senza_duplicati)

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## Soluzione 2

Usiamo un ciclo `while` per iterare attraverso la lista originale. Un `set` viene utilizzato per memorizzare gli elementi già visti e una lista di appoggio per memorizzare gli elementi unici. Gli elementi vengono aggiunti alla lista di appoggio solo se non sono già presenti nel `set`. Dopo aver rimosso i duplicati, ordiniamo la lista risultante.

```python
def rimuovi_duplicati(lista):
  lista_senza_duplicati = []
  visti = set()

  i = 0
  while i < len(lista):
    if lista[i] not in visti:
      lista_senza_duplicati.append(lista[i])

      visti.add(lista[i])

    i += 1

  return sorted(lista_senza_duplicati)

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## Soluzione 3

Usiamo un dizionario per memorizzare gli elementi unici, sfruttando il fatto che i dizionari preservano l'ordine di inserimento a partire da Python 3.7. Gli elementi vengono aggiunti al dizionario come chiavi. Dopo aver rimosso i duplicati, ordiniamo la lista delle chiavi del dizionario.

```python
def rimuovi_duplicati(lista):
  return sorted(dict.fromkeys(lista))

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

## ➂ Soluzione 4

Utilizziamo una list comprehension per creare una nuova lista. Un `set` viene usato per tenere traccia degli elementi già visti, e gli elementi vengono aggiunti alla lista finale solo se non sono già presenti nel `set`. Dopo aver rimosso i duplicati, ordiniamo la lista risultante.

```python
def rimuovi_duplicati(lista):
  visti = set()

  lista_senza_duplicati = [x for x in lista if not (x in visti or visti.add(x))]

  return sorted(lista_senza_duplicati)

# Esempio di utilizzo
lista = [4, 2, 2, 3, 1, 4, 5]

print(rimuovi_duplicati(lista)) 
```

:::

