---
reference-location: margin
citation-location: margin

format:
  html:
    code-fold: true
    code-summary: "Mostra il codice"
---

# Esercizi

## Fondamenti

### ★☆☆☆☆ Python come calcolatrice

Proviamo a fare delle operazioni su booleani, numeri interi, in virgola mobile e stringhe nel REPL.

#### Numeri

::: {.callout-tip}
## Suggerimento

Usare gli operatori matematici su costanti numeriche e osservare i risultati e gli errori nel REPL, perché è più immediato rispetto all'esecuzione completa del programma.
:::

```{python}
# Se eseguite nel REPL i print sono inutili!
# Moltiplicazione
x = 5 * 2
print(x)

x = 5 * 2.
print(x) # Cosa notiamo?

# Divisione in virgola mobile
x = 5 / 2
print(x)

x = 4 / 2
print(x) # Cosa notiamo?

x = 4 / 2.
print(x)

# Maggiore di
x = 5 > 2
print(x)

x = 5 > 2.
print(x) # Cosa notiamo?

# Test di diversità
x = 4 != 4.
print(x) # Cosa notiamo?

x = 0 != (1 - 1)
print(x) # Cosa notiamo?
```

#### Stringhe

::: {.callout-tip}
## Suggerimento

Usare gli operatori su stringhe sempre nel REPL.
:::

```{python}
# Se eseguite nel REPL i print sono inutili!
s = "Hello" + ' ' + 'World!'
print(s)

ss = s

ss *= 2
print(ss)
print(s) # Cosa notiamo per s e ss?

b = 'el' in s
print(b) 

b = 'oo' not in s
print(b)

b = "Ciao Mondo!" < s 
print(b) # È rispettato l'ordine lessicografico?

# Slicing della stringa come contenitore di caratteri
s_ = ss[:len(s)] 
print(s) 

l = len(ss) 
print(l)

# Modo alternativo di ottenere la stringa originale solo usando ss
s_ = ss[:int(len(ss) / 2)] 
print(s_) 
```

## Funzioni e istruzioni composte

### ★★☆☆☆ Numeri pari o dispari 

Definire una funzione che prende in input un numero intero e restituisce una stringa di `Pari` o `Dispari`.

#### Riscaldamento: sperimentazione dell'operatore modulo

::: {.callout-tip}
## Suggerimento

Usare l'operatore modulo `%` che restituisce il resto della divisione di due interi con diversi input sia pari che dispari ed anche non numerici per vedere cosa accade.
:::

```{python}
n = 42

if n % 2 == 0:
  print("Pari")

else:
  print(Dispari)
```

#### Soluzione 1: test con operatore modulo

::: {.callout-tip}
## Suggerimento

Usare l'operatore modulo `%` che restituisce il resto della divisione di due interi all'interno di una funzione. Questa prende in input un numero intero e restituisce la stringa richiesta.
:::

```{python}
def pari_o_dispari(n):
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```

#### Soluzione 2: test con operatore modulo e controllo degli input

::: {.callout-tip}
## Suggerimento

Usare l'operatore modulo `%` e la funzione `isinstance` per verificare il tipo in input.
:::

```{python}
def pari_o_dispari(n):
  if not isinstance(n, int):
    return "Errore: l'input deve essere un numero intero!"
    
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```

#### Soluzione 3: test con operatore modulo e generazione di errore su input non intero

::: {.callout-tip}
## Suggerimento

Usare l'operatore modulo `%`, la funzione `isinstance` per verificare il tipo in input e `assert` in caso di input non corretto.
:::

```{python}
def pari_o_dispari(n):
  assert isinstance(n, int), \
    "Errore: l'input deve essere un numero intero!"
    
  if n % 2 == 0:
    return "Pari"

  else:
    return "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)

'''
risultato = pari_o_dispari("42")

print(risultato)

risultato = pari_o_dispari(73.)

print(risultato)
'''
```

#### Soluzione 4: uso di funzione built-in

::: {.callout-tip}
## Suggerimento

Usare la funzione `divmod` che restituisce il quoziente e il resto della divisione di due interi.
:::

```{python}
def pari_o_dispari(n):
  _, remainder = divmod(n, 2)

  return "Pari" if remainder == 0 else "Dispari"

risultato = pari_o_dispari(42)

print(risultato)

risultato = pari_o_dispari(73)

print(risultato)
```

