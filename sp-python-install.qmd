---
reference-location: margin
citation-location: margin
---

# Scaricare e installare Python

## Scaricamento

1. Visita il sito ufficiale di Python: Vai su [python.org](https://www.python.org/).
2. Naviga alla pagina di download: Clicca su _Downloads_ nel menu principale.
3. Scarica il pacchetto di installazione:
   - Per Windows: Cerca Python 3.12.x e fai partire il download (assicurati di scaricare la versione più recente).
   - Per macOS: Come per Windows.
   - Per Linux: Python è spesso preinstallato. Se non lo è, usa il gestore di pacchetti della tua distribuzione (ad esempio `apt` per Ubuntu: `sudo apt-get install python3`).

## Installazione

1. Esegui il file di installazione:
   - Su Windows: Esegui il file `.exe` scaricato. Assicurati di selezionare l'opzione `Add Python to PATH` durante l'installazione.
   - Su macOS: Apri il file `.pkg` scaricato e segui le istruzioni.
   - Su Linux: Usa il gestore di pacchetti per installare Python.

2. Verifica l'installazione:
   - Apri il terminale (Command Prompt su Windows, Terminal su macOS e Linux).
   - Digita `python --version` o `python3 --version` e premi Invio. Dovresti vedere la versione di Python installata.

## Esecuzione del primo programma: "Hello, World!"

È consuetudine eseguire come primo programma la visualizzazione della stringa "Hello, World!"[^1-sp-python-install]. Possiamo farlo in diversi modi e ciò è una delle caratteristiche più apprezzate di Python.

[^1-sp-python-install]: La tradizione del programma "Hello, World!" ha una lunga storia che risale ai primi giorni della programmazione. Questo semplice programma è generalmente il primo esempio utilizzato per introdurre i nuovi programmatori alla sintassi e alla struttura di un linguaggio di programmazione. Il programma "Hello, World!" è diventato famoso grazie a Brian Kernighan, che lo ha incluso nel suo libro [@kernighan1988c] pubblicato nel 1978. Tuttavia, il suo utilizzo risale a un testo precedente di Kernighan, [@kernighan1973b], pubblicato nel 1973, dove veniva utilizzato un esempio simile.

### REPL

Il primo modo prevede l'utilizzo del REPL di Python. Il REPL (read-eval-print loop) è un ambiente interattivo di esecuzione di comandi Python generato dall'interprete, secondo il ciclo:

1. Read: Legge un input dell'utente.
2. Eval: Valuta l'input.
3. Print: Visualizza il risultato dell'esecuzione.
4. Loop: Ripete il ciclo.

Eseguiamo il nostro primo "Hello, World!":

1. Apri il terminale ed esegui l'interprete Python digitando `python` o `python3` e premi il tasto di invio della tastiera.
2. Scrivi ed esegui il programma:
  
  ```python
  print("Hello, World!")
  ```

  Premi il tasto di invio per vedere il risultato immediatamente.

::: {.callout-warning}

## Attenzione

Il REPL e l'interprete Python sono strettamente collegati, ma non sono esattamente la stessa cosa. Quando avvii l'interprete Python senza specificare un file di script da eseguire (digitando semplicemente `python` o `python3` nel terminale), entri in modalità REPL. Nel REPL, l'interprete Python legge l'input direttamente dall'utente, lo esegue, stampa il risultato e poi attende il prossimo input. In sintesi, l'interprete può eseguire programmi Python completi salvati in file, il REPL è progettato per un'esecuzione interattiva e immediata di singole istruzioni.

:::

### Interprete

Un altro modo per eseguire il nostro programma "Hello, World!" è utilizzare l'interprete Python per eseguire un file di codice sorgente. Questo metodo è utile per scrivere programmi più complessi e per mantenere il codice per usi futuri.

Ecco come fare sui diversi sistemi operativi.

::: {.panel-tabset}

## Windows

1. Crea un file di testo:
   1. Apri il tuo editor di testo preferito, come Notepad.
   2. Scrivi il seguente codice nel file:
    ```python
     print("Hello, World!")
     ```
   3. Salva il file con il nome `hello.txt`.
2. Rinomina il file (facoltativo): se desideri mantenere il file senza estensione `.txt`, puoi rinominarlo in `hello` direttamente dall'Esplora file.
1. Esegui il file Python:
   1. Apri il prompt dei comandi.
   2. Naviga fino alla directory in cui hai salvato il file. Ad esempio, se il file si trova nella cartella `Documenti`, puoi digitare:
     ```bash
     cd %HOMEPATH%\Documenti
     ```
   3. Esegui l'interprete Python passando come argomento il file che hai creato:
     ```dos
     python hello.txt
     ```
     oppure, se il tuo sistema utilizza `python3`:
     ```dos
     python3 hello.txt
     ```
2. Visualizza il risultato:
   ```dos
   Hello, World!
   ```

## macOS

1. Crea un file di testo:
   1. Apri il tuo editor di testo preferito, come TextEdit.
   2. Scrivi il seguente codice nel file:
     ```python
     print("Hello, World!")
     ```
   3. Salva il file con il nome `hello.txt`.
2. Rinomina il file (facoltativo): se desideri mantenere il file senza estensione `.txt`, puoi rinominarlo in `hello` direttamente dal Finder.
3. Esegui il file Python:
   1. Apri il terminale del sistema operativo.
   2. Naviga fino alla directory in cui hai salvato il file. Ad esempio, se il file si trova nella cartella `Documenti`, puoi digitare:
     ```bash
     cd ~/Documents
     ```
   3. Esegui l'interprete Python passando come argomento il file che hai creato:
     ```bash
     python3 hello.txt
     ```
4. Visualizza il risultato:
   ```bash
   Hello, World!
   ```

## Linux

1. Crea un file di testo:
   1. Apri il tuo editor di testo preferito, come Gedit o Nano.
   2. Scrivi il seguente codice nel file:
     ```python
     print("Hello, World!")
     ```
   3. Salva il file con il nome `hello.txt`.
2. Rinomina il file (facoltativo): se desideri mantenere il file senza estensione `.txt`, puoi rinominarlo in `hello` utilizzando il comando `mv` nel terminale:
     ```bash
     mv hello.txt hello
     ```
3. Esegui il file Python:
   1. Apri il terminale del sistema operativo.
   2. Naviga fino alla directory in cui hai salvato il file. Ad esempio, se il file si trova nella cartella `Documenti`, puoi digitare:
     ```bash
     cd ~/Documenti
     ```
   3. Esegui l'interprete Python passando come argomento il file che hai creato:
     ```bash
     python3 hello.txt
     ```
4. Visualizza il risultato:
   ```bash
   Hello, World!
   ```

:::

Con queste istruzioni, dovresti essere in grado di eseguire il programma "Hello, World!" utilizzando un file Python su Windows, macOS e Linux.

### IDE

Utilizzo di un IDE (integrated development environment) installato sul computer. Ecco alcuni dei più comuni e gratuiti.

::: {.panel-tabset}

## IDLE

Incluso con l'installazione di Python.

1. Avvia IDLE.
2. Crea un nuovo file (`File -> New File`).
3. Scrivi il programma:
  ```python
  print("Hello, World!")
  ```
4. Salva il file (`File -> Salva`).
5. Esegui il programma (`Run -> Run Module`).

## PyCharm

Proprietario ma con una versione liberamente fruibile.

1. Scarica e installa PyCharm da [jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download/).
2. Crea un nuovo progetto associando l'interprete Python.
3. Crea un nuovo file Python (`File -> New -> Python File`).
4. Scrivi il programma:
  ```python
  print("Hello, World!")
  ```
5. Esegui il programma (`Run -> Run...`).

## Visual Studio Code

Proprietario ma liberamente fruibile.

1. Scarica e installa VS Code da [code.visualstudio.com](https://code.visualstudio.com/).
2. Installa l'estensione Python.
3. Apri o crea una nuova cartella di progetto.
4. Crea un nuovo file Python (`File -> Nuovo file`).
5. Scrivi il programma:
  ```python
  print("Hello, World!")
  ```
6. Salva il file con estensione `.py`, ad esempio `hello_world.py`.
7. Esegui il programma utilizzando il terminale integrato (`Visualizza -> Terminale`) e digitando `python hello_world.py`.

:::

### Esecuzione nel browser

Puoi eseguire Python direttamente nel browser, senza installare nulla. Anche qui abbiamo diverse alternative, sia eseguendo il codice localmente, che utilizzando piattaforme online.

::: {.panel-tabset}

## Repl.it

1. Visita [repl.it](https://repl.it/).
2. Crea un nuovo progetto selezionando Python.
3. Scrivi il programma:
  ```python
  print("Hello, World!")
  ```
4. Clicca su "Run" per eseguire il programma.

## Google Colab

1. Visita [colab.research.google.com](https://colab.research.google.com/).
2. Crea un nuovo notebook.
3. In una cella di codice, scrivi:
  ```python
  print("Hello, World!")
  ```
4. Premi il pulsante di esecuzione accanto alla cella.

## PyScript

1. Visita il sito ufficiale di [PyScript](https://pyscript.net/) per ulteriori informazioni su come iniziare.
2. Crea un file HTML con il seguente contenuto:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello, World with PyScript</title>
    <link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css">
    <script defer src="https://pyscript.net/latest/pyscript.js"></script>
</head>
<body>
    <py-script>
        print("Hello, World!")
    </py-script>
</body>
</html>
```

3. Salva il file con estensione `.html` (ad esempio, `hello.html`).
4. Apri il file salvato in un browser web. Vedrai l'output `Hello, World!` direttamente nella pagina.

:::

### Jupyter Notebook

Jupyter Notebook è un ambiente di sviluppo interattivo per la programmazione che permette di creare e condividere documenti contenenti codice eseguibile, visualizzazioni, testo formattato e altro ancora. Originariamente sviluppato come parte del progetto IPython, Jupyter supporta non solo Python, ma anche numerosi altri linguaggi di programmazione attraverso i cosiddetti kernel tra cui R, Julia e Scala. 

::: {.panel-tabset}

## Uso locale

1. Assicurati di avere Python e Jupyter installati sul tuo computer. Se non li hai, puoi installarli utilizzando Anaconda o pip:
  ```bash
  pip install notebook
  ```
2. Avvia Jupyter Notebook dal terminale:
  ```bash
  jupyter notebook
  ```
3. Crea un nuovo notebook Python.
4. In una cella di codice, scrivi:
  ```python
  print("Hello, World!")
  ```
5. Premi `Shift + Enter` per eseguire la cella.

## JupyterHub

1. Visita l'istanza di JupyterHub della tua istituzione o azienda ([maggiori informazioni](https://jupyter.org/hub)).
2. Accedi con le tue credenziali.
3. Crea un nuovo notebook Python.
4. In una cella di codice, scrivi:
  ```python
  print("Hello, World!")
  ```
5. Premi `Shift + Enter` per eseguire la cella.

## Binder

1. Visita [mybinder.org](https://mybinder.org/).
2. Inserisci l'URL del repository GitHub che contiene il tuo notebook o il tuo progetto Python.
3. Clicca su "Launch".
4. Una volta avviato l'ambiente, crea un nuovo notebook o apri uno esistente.
5. In una cella di codice, scrivi:
  ```python
  print("Hello, World!")
  ```
6. Premi `Shift + Enter` per eseguire la cella.

Binder è un servizio simile a Colab, anche se quest'ultimo offre strumenti generalmente più avanzati in termini di risorse computazionali e collaborazione. Binder di contro è basato su GitHub e ciò può essere utile in alcuni contesti. 

:::