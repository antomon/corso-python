[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Da neofita di Python a campione",
    "section": "",
    "text": "Prefazione",
    "crumbs": [
      "Prefazione"
    ]
  },
  {
    "objectID": "fp-programming-languages.html",
    "href": "fp-programming-languages.html",
    "title": "1  I linguaggi di programmazione, i programmi e i programmatori",
    "section": "",
    "text": "1.1 Cosa sono?\nLa programmazione è il processo di progettazione e scrittura di istruzioni che un computer può ricevere per eseguire compiti predefiniti. Queste istruzioni sono codificate in un linguaggio di programmazione, che traduce le idee e gli algoritmi del programmatore in un formato che il computer può comprendere ed eseguire.\nCos’è un programma informatico?\nUn programma informatico è una sequenza di istruzioni scritte per eseguire una specifica operazione o un insieme di operazioni su un computer. Queste istruzioni sono codificate in un linguaggio che il computer può comprendere e seguire per eseguire attività come calcoli, manipolazione di dati, controllo di dispositivi e interazione con l’utente.\nPensate a un programma come a una ricetta di cucina. La ricetta elenca gli ingredienti necessari (dati) e fornisce istruzioni passo-passo (algoritmo) per preparare un piatto. Allo stesso modo, un programma informatico specifica i dati da usare e le istruzioni da seguire per ottenere un risultato desiderato.\nCos’è un linguaggio di programmazione?\nUn linguaggio di programmazione è un linguaggio formale che fornisce un insieme di regole e sintassi per scrivere programmi informatici. Questi linguaggi permettono ai programmatori di comunicare con i computer e di creare software. Alcuni esempi di linguaggi di programmazione includono Python, Java, C++ e JavaScript.\nI linguaggi di programmazione differiscono dai linguaggi naturali (come l’italiano o l’inglese) in diversi modi:\nCome un programma produce azioni in un calcolatore?\nQuando un programma è scritto e salvato, il computer deve eseguirlo per produrre le azioni desiderate. Questo processo avviene in diverse fasi:",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>I linguaggi di programmazione, i programmi e i programmatori</span>"
    ]
  },
  {
    "objectID": "fp-programming-languages.html#cosa-sono",
    "href": "fp-programming-languages.html#cosa-sono",
    "title": "1  I linguaggi di programmazione, i programmi e i programmatori",
    "section": "",
    "text": "Precisione e rigidità: I linguaggi di programmazione sono estremamente precisi e rigidi. Ogni istruzione deve essere scritta in un modo specifico affinché il computer possa comprenderla ed eseguirla correttamente. Anche un piccolo errore di sintassi può impedire il funzionamento di un programma.\nAmbiguità: I linguaggi naturali sono spesso ambigui e aperti a interpretazioni. Le stesse parole possono avere significati diversi a seconda del contesto. I linguaggi di programmazione, invece, sono progettati per essere privi di ambiguità; ogni istruzione ha un significato preciso e univoco.\nVocabolario limitato: I linguaggi naturali hanno un vocabolario vastissimo e in continua espansione. I linguaggi di programmazione, al contrario, hanno un vocabolario limitato costituito da parole chiave e comandi definiti dal linguaggio stesso.\n\n\n\n\nCompilazione o interpretazione: La maggior parte dei programmi deve essere trasformata da un linguaggio di alto livello (leggibile dall’uomo) a un linguaggio macchina (comprensibile dal computer). Questo avviene attraverso un processo chiamato compilazione (per linguaggi come C++ o Java) o interpretazione (per linguaggi come Python o JavaScript).\nEsecuzione: Una volta che il programma è stato compilato o interpretato, il computer può eseguire le istruzioni una per una. La CPU (central processing unit) del computer legge le istruzioni e le esegue, manipolando i dati e producendo i risultati desiderati.\nInterazione con componenti hardware: Durante l’esecuzione, il programma può interagire con vari componenti hardware del computer, come la memoria, i dischi rigidi, la rete, e i dispositivi di input/output (come tastiere e monitor).",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>I linguaggi di programmazione, i programmi e i programmatori</span>"
    ]
  },
  {
    "objectID": "fp-programming-languages.html#limpatto-dellintelligenza-artificiale-generativa-sulla-programmazione",
    "href": "fp-programming-languages.html#limpatto-dellintelligenza-artificiale-generativa-sulla-programmazione",
    "title": "1  I linguaggi di programmazione, i programmi e i programmatori",
    "section": "1.2 L’Impatto dell’intelligenza artificiale generativa sulla programmazione",
    "text": "1.2 L’Impatto dell’intelligenza artificiale generativa sulla programmazione\nCon l’avvento dell’intelligenza artificiale (IA) generativa, la programmazione ha subito una trasformazione significativa. Prima dell’IA generativa, i programmatori dovevano tutti scrivere manualmente ogni riga di codice, seguendo rigorosamente la sintassi e le regole del linguaggio di programmazione scelto. Questo processo richiedeva una conoscenza approfondita degli algoritmi, delle strutture dati e delle migliori pratiche di programmazione.\nInoltre, i programmatori dovevano creare ogni funzione, classe e modulo a mano, assicurandosi che ogni dettaglio fosse corretto, identificavano e correggevano gli errori nel codice con un processo lungo e laborioso, che comportava anche la scrittura di casi di test e l’esecuzione di sessioni di esecuzione di tali casi. Infine, dovebano scrivere documentazione dettagliata per spiegare il funzionamento del codice e facilitare la manutenzione futura.\n\n1.2.1 Attività del programmatore con l’IA Generativa\nL’IA generativa ha introdotto nuovi strumenti e metodologie che stanno cambiando il modo in cui i programmatori lavorano:\n\nGenerazione automatica del codice: Gli strumenti di IA generativa possono creare porzioni di codice basate su descrizioni ad alto livello fornite dai programmatori. Questo permette di velocizzare notevolmente lo sviluppo iniziale e ridurre gli errori di sintassi.\nAssistenza nel debugging: L’IA può identificare potenziali bug e suggerire correzioni, rendendo il processo di debugging più efficiente e meno dispendioso in termini di tempo.\nOttimizzazione automatica: Gli algoritmi di IA possono analizzare il codice e suggerire o applicare automaticamente ottimizzazioni per migliorare le prestazioni.\nGenerazione di casi di test: L’IA può creare casi di test per verificare la correttezza del codice, coprendo una gamma più ampia di scenari di quanto un programmatore potrebbe fare manualmente.\nDocumentazione automatica: L’IA può generare documentazione leggendo e interpretando il codice, riducendo il carico di lavoro manuale e garantendo una documentazione coerente e aggiornata.\n\n\n\n1.2.2 L’Importanza di imparare a programmare nell’era dell’IA generativa\nNonostante l’avvento dell’IA generativa, imparare a programmare rimane fondamentale per diverse ragioni. La programmazione non è solo una competenza tecnica, ma anche un modo di pensare e risolvere problemi. Comprendere i fondamenti della programmazione è essenziale per utilizzare efficacemente gli strumenti di IA generativa. Senza una solida base, è difficile sfruttare appieno queste tecnologie. Inoltre, la programmazione insegna a scomporre problemi complessi in parti più gestibili e a trovare soluzioni logiche e sequenziali, una competenza preziosa in molti campi.\nAnche con l’IA generativa, esisteranno sempre situazioni in cui sarà necessario personalizzare o ottimizzare il codice per esigenze specifiche. La conoscenza della programmazione permette di fare queste modifiche con sicurezza. Inoltre, quando qualcosa va storto, è indispensabile sapere come leggere e comprendere il codice per identificare e risolvere i problemi. L’IA può assistere, ma la comprensione umana rimane cruciale per interventi mirati.\nImparare a programmare consente di sperimentare nuove idee e prototipare rapidamente soluzioni innovative. La creatività è potenziata dalla capacità di tradurre idee in codice funzionante. Sapere programmare aiuta anche a comprendere i limiti e le potenzialità degli strumenti di IA generativa, permettendo di usarli in modo più strategico ed efficace.\nLa tecnologia evolve rapidamente, e con una conoscenza della programmazione si è meglio preparati ad adattarsi alle nuove tecnologie e metodologie che emergeranno in futuro. Inoltre, la programmazione è una competenza trasversale applicabile in numerosi settori, dalla biologia computazionale alla finanza, dall’ingegneria all’arte digitale. Avere questa competenza amplia notevolmente le opportunità di carriera.\nInfine, la programmazione è una porta d’accesso a ruoli più avanzati e specializzati nel campo della tecnologia, come l’ingegneria del software, la scienza dei dati e la ricerca sull’IA. Conoscere i principi della programmazione aiuta a comprendere meglio come funzionano gli algoritmi di IA, permettendo di contribuire attivamente allo sviluppo di nuove tecnologie.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>I linguaggi di programmazione, i programmi e i programmatori</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html",
    "href": "fp-programming-paradigms.html",
    "title": "2  Paradigmi di programmazione",
    "section": "",
    "text": "2.1 Linguaggi di programmazione imperativa\nLa programmazione imperativa si concentra sull’esecuzione di istruzioni sequenziali che modificano lo stato del programma. Le istruzioni indicano al computer cosa fare passo dopo passo. Esempi di linguaggi che permettono il paradigma imperativo sono Assembly, C, Go, Python, per diversi casi d’uso:",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#linguaggi-di-programmazione-imperativa",
    "href": "fp-programming-paradigms.html#linguaggi-di-programmazione-imperativa",
    "title": "2  Paradigmi di programmazione",
    "section": "",
    "text": "Assembly: Utilizzato nella programmazione a basso livello, come nello sviluppo di firmware e driver di dispositivi.\nC: Utilizzato per lo sviluppo di sistemi operativi e software di sistema, dove il controllo dettagliato delle operazioni è cruciale.\nGo: Sviluppato da Google, è utilizzato per costruire applicazioni di rete e sistemi scalabili, noto per la sua efficienza e facilità di utilizzo nelle applicazioni concorrenti.\nPython: Utilizzato in vari campi e noto per la sua semplicità e leggibilità, supporta la programmazione imperativa con l’uso di dichiarazioni di controllo e assegnazioni di variabili.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#linguaggi-procedurali",
    "href": "fp-programming-paradigms.html#linguaggi-procedurali",
    "title": "2  Paradigmi di programmazione",
    "section": "2.2 Linguaggi procedurali",
    "text": "2.2 Linguaggi procedurali\nLa programmazione procedurale è un sottotipo di programmazione imperativa che organizza il codice in blocchi chiamati procedure o funzioni. Questi blocchi possono essere riutilizzati in diverse parti del programma per evitare ripetizioni e migliorare l’organizzazione del codice. Esempi sono Fortran, Pascal, C, Go, Python e i relativi casi d’uso:\n\nFortran: Molto utilizzato in applicazioni scientifiche e di ingegneria per calcoli numerici ad alta precisione.\nPascal: Storicamente utilizzato nei corsi di informativa per insegnare i fondamenti della programmazione.\nGo, Python: Supportano la programmazione procedurale grazie alla possibilità di definire funzioni e organizzare il codice in moduli.\nC: Anche se C non supporta i moduli nel senso moderno, utilizza file header (.h) e file sorgente (.c) per separare e organizzare il codice.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#linguaggi-orientati-agli-oggetti",
    "href": "fp-programming-paradigms.html#linguaggi-orientati-agli-oggetti",
    "title": "2  Paradigmi di programmazione",
    "section": "2.3 Linguaggi orientati agli oggetti",
    "text": "2.3 Linguaggi orientati agli oggetti\nQuesti linguaggi modellano il problema come un insieme di oggetti che interagiscono tra loro per svolgere un compito. Gli oggetti sono istanze di classi, che possono contenere dati e metodi per manipolare quei dati. La programmazione orientata agli oggetti è estremamente utile per progettare architetture software complesse grazie ai suoi concetti di modularità, riutilizzabilità, astrazione, ereditarietà e polimorfismo. Alcuni linguaggi ad oggetti sono Java, Python, C++, Rust, Scala e i casi d’uso:\n\nJava: Ampiamente utilizzato per lo sviluppo di applicazioni aziendali, applicazioni Android e sistemi di backend.\nC++: Utilizzato in applicazioni ad alte prestazioni come videogiochi, motori grafici e software di simulazione. Il C++ supporta i template, che permettono la scrittura di codice generico e la metaprogrammazione, consentendo al codice di essere più flessibile e riutilizzabile.\nRust: Concepito per garantire la sicurezza della memoria e la concorrenza, offre anche supporto per la programmazione orientata agli oggetti.\nScala: Utilizzato per sviluppare applicazioni scalabili e sistemi distribuiti, spesso usato per l’elaborazione di grandi moli di dati. Scala supporta i generics, che sono simili ai template in C++, permettendo di scrivere codice generico e riutilizzabile.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#linguaggi-funzionali",
    "href": "fp-programming-paradigms.html#linguaggi-funzionali",
    "title": "2  Paradigmi di programmazione",
    "section": "2.4 Linguaggi funzionali",
    "text": "2.4 Linguaggi funzionali\nQuesti linguaggi si concentrano sulla valutazione di espressioni e funzioni, trattandole alla stregua di equazioni matematiche. La programmazione funzionale enfatizza l’uso di funzioni pure (cioè hanno come unico effetto quello di produrre un output) e l’immutabilità dei dati. Alcuni esempi: Haskell, Lisp, ML, Scala e i casi d’uso:\n\nHaskell: Utilizzato nella ricerca accademica, nello sviluppo di software finanziario e nei sistemi di calcolo parallelo.\nLisp: Storicamente utilizzato nell’intelligenza artificiale e nello sviluppo di software di simulazione. ELIZA, uno dei primi chatbot che potevano simulare una conversazione umana, era scritto in Lisp.\nMeta language (ML): Utilizzato nello sviluppo di compilatori, nell’analisi formale di programmi e in applicazioni finanziarie. ML ha diversi dialetti importanti, ognuno dei quali ha influenzato significativamente la programmazione funzionale e lo sviluppo di linguaggi di programmazione, come F# e OCaml.\nScala: Abilita sia la programmazione orientata agli oggetti che la programmazione funzionale, rendendolo un linguaggio versatile per vari tipi di applicazioni.\nPython: Sebbene Python non sia un linguaggio di programmazione funzionale puro come l’Haskell, offre comunque molte funzionalità che facilitano lo stile di programmazione funzionale, ad esempio la funzioni di prima classe, quelle anonime dette lambda e le funzioni di ordine superiore (map, filter, reduce).",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#altri-paradigmi-di-programmazione",
    "href": "fp-programming-paradigms.html#altri-paradigmi-di-programmazione",
    "title": "2  Paradigmi di programmazione",
    "section": "2.5 Altri paradigmi di programmazione",
    "text": "2.5 Altri paradigmi di programmazione\nOltre ai paradigmi principali sopra menzionati, esistono altri paradigmi di programmazione meno comuni ma altrettanto importanti in certi contesti.\n\nLogico: Prolog, che sta per programming in logic, è stato sviluppato nei primi anni ’70 da Alain Colmerauer e Robert Kowalski. È uno dei linguaggi più noti per la programmazione logica e ha giocato un ruolo significativo nello sviluppo dell’intelligenza artificiale.\nConcorrente: Uno dei più diffusi linguaggi abilitanti la programmazione concirrente è l’Erlang, utilizzato nello sviluppo di sistemi distribuiti e applicazioni che richiedono alta disponibilità.\nDichiarativo: La programmazione dichiarativa si concentra sul “cosa” deve essere fatto piuttosto che sul “come” farlo. In altre parole, in un linguaggio dichiarativo, il programmatore specifica il risultato desiderato, lasciando al sistema il compito di determinare come ottenerlo. Questo approccio contrasta con la programmazione imperativa, dove il programmatore deve fornire una sequenza dettagliata di passi per raggiungere il risultato. Un esempio è lo structured query language (SQL), standard de facto per interrogare e manipolare database relazionali. Altri ben noti linguaggi dichiarativi sono: CSS, XQuery, VHDL, RegEx, Makefile.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "fp-programming-paradigms.html#in-sintesi",
    "href": "fp-programming-paradigms.html#in-sintesi",
    "title": "2  Paradigmi di programmazione",
    "section": "2.6 In sintesi",
    "text": "2.6 In sintesi\nI paradigmi di programmazione offrono diversi approcci per risolvere problemi e progettare sistemi software. Ogni paradigma ha i suoi punti di forza e indirizza specifiche esigenze nel processo di sviluppo del software. La comprensione e l’utilizzo dei vari paradigmi permette ai programmatori di scegliere l’approccio più appropriato per il problema in questione e di scrivere codice più efficace, mantenibile e riutilizzabile:\n\nProgrammazione imperativa: Ottimale per problemi che richiedono una sequenza di istruzioni dettagliate e un controllo preciso sullo stato del programma.\nProgrammazione procedurale: Favorisce la modularità e la riusabilità del codice tramite la suddivisione in procedure o funzioni.\nProgrammazione orientata agli oggetti: Eccelle nella gestione di sistemi complessi grazie alla modularità, riusabilità, astrazione, ereditarietà e polimorfismo.\nProgrammazione funzionale: Promuove funzioni pure, immutabilità e composizionalità, facilitando il ragionamento e la verifica del comportamento del sistema.\nProgrammazione logica: Ideale per problemi che possono essere espressi in termini di relazioni logiche, come l’intelligenza artificiale e la risoluzione di vincoli.\nProgrammazione dichiarativa: Si concentra sul “cosa” piuttosto che sul “come”, rendendo il codice più leggibile e permettendo l’ottimizzazione automatica.\n\nAlcuni linguaggi di programmazione, come Python e C++, sono noti per il loro supporto a molteplici paradigmi, rendendoli strumenti versatili e potenti nel repertorio di un programmatore.",
    "crumbs": [
      "Prima parte: I fondamenti",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Paradigmi di programmazione</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Stroustrup, Bjarne. 1997. The c++ Programming Language. 3rd ed.\nReading, MA, USA: Addison-Wesley.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  }
]